name: Deploy to Server

on:
  push:
    branches:
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to server via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        password: ${{ secrets.SSH_PASSWORD }}
        # 如果使用 SSH 密钥认证（推荐），取消下面两行的注释，并注释掉 password
        # key: ${{ secrets.SSH_PRIVATE_KEY }}
        # passphrase: ${{ secrets.SSH_PASSPHRASE }}
        port: ${{ secrets.SSH_PORT || 22 }}
        timeout: 300s
        script: |
          set -e
          
          # 颜色定义
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          BLUE='\033[0;34m'
          NC='\033[0m'
          
          echo -e "${BLUE}========================================${NC}"
          echo -e "${BLUE}  开始部署环信回调服务${NC}"
          echo -e "${BLUE}========================================${NC}"
          echo ""
          
          # 服务器上的项目目录（可通过 secret 配置）
          # 默认值 $HOME/easemob_ai_agent 与 install.sh 中的 DEFAULT_INSTALL_DIR 保持一致
          PROJECT_DIR="${SSH_PROJECT_DIR:-$HOME/easemob_ai_agent}"
          DEPLOY_TYPE="${SSH_DEPLOY_TYPE:-local}"
          
          echo -e "${BLUE}[INFO]${NC} 项目目录: $PROJECT_DIR"
          echo -e "${BLUE}[INFO]${NC} 部署方式: $DEPLOY_TYPE"
          echo -e "${BLUE}[INFO]${NC} Git 提交: ${{ github.sha }}"
          echo ""
          
          # 创建项目目录（如果不存在）
          mkdir -p "$PROJECT_DIR"
          cd "$PROJECT_DIR"
          
          # 如果目录不存在或是空目录，克隆仓库
          if [ ! -d ".git" ]; then
            echo -e "${BLUE}[INFO]${NC} 首次部署，克隆仓库..."
            git clone https://github.com/dujiepeng/easemob_ai_agent.git "$PROJECT_DIR" || {
              echo -e "${YELLOW}[WARNING]${NC} 克隆失败，尝试初始化..."
              rm -rf "$PROJECT_DIR"/*
              git clone https://github.com/dujiepeng/easemob_ai_agent.git .
            }
          else
            echo -e "${BLUE}[INFO]${NC} 切换到 dev 分支并更新代码..."
            git fetch origin dev || git fetch origin
            git checkout -B dev origin/dev 2>/dev/null || git checkout -b dev || git checkout dev
            git reset --hard origin/dev
            git clean -fd
          fi
          
          # 确保 .env 文件存在（如果不存在则从示例复制，但不会覆盖已有配置）
          if [ ! -f ".env" ]; then
            echo -e "${YELLOW}[WARNING]${NC} .env 文件不存在，从示例复制..."
            if [ -f "env.example" ]; then
              cp env.example .env
              echo -e "${YELLOW}[WARNING]${NC} 请确保在服务器上配置正确的 .env 文件内容"
            else
              echo -e "${RED}[ERROR]${NC} env.example 文件不存在"
              exit 1
            fi
          fi
          
          # 根据部署方式执行不同的部署步骤
          if [ "$DEPLOY_TYPE" = "docker" ]; then
            echo -e "${BLUE}[INFO]${NC} 使用 Docker 方式部署..."
            
            # 检查 Docker 和 docker-compose
            if ! command -v docker &> /dev/null; then
              echo -e "${RED}[ERROR]${NC} Docker 未安装"
              exit 1
            fi
            
            if ! command -v docker-compose &> /dev/null; then
              echo -e "${RED}[ERROR]${NC} docker-compose 未安装"
              exit 1
            fi
            
            # 停止现有服务
            echo -e "${BLUE}[INFO]${NC} 停止现有服务..."
            cd "$PROJECT_DIR"
            docker-compose down || true
            
            # 构建并启动
            echo -e "${BLUE}[INFO]${NC} 构建 Docker 镜像..."
            docker-compose build --no-cache
            
            echo -e "${BLUE}[INFO]${NC} 启动服务..."
            docker-compose up -d
            
            # 等待服务启动
            echo -e "${BLUE}[INFO]${NC} 等待服务启动..."
            sleep 10
            
            # 检查服务状态
            if docker-compose ps | grep -q "Up"; then
              echo -e "${GREEN}[SUCCESS]${NC} Docker 服务启动成功！"
              echo ""
              docker-compose ps
              echo ""
              
              # 健康检查
              if command -v curl &> /dev/null; then
                sleep 3
                if curl -f -s http://localhost:9999/health > /dev/null 2>&1; then
                  echo -e "${GREEN}[SUCCESS]${NC} 健康检查通过"
                else
                  echo -e "${YELLOW}[WARNING]${NC} 健康检查失败，请检查服务日志"
                fi
              fi
            else
              echo -e "${RED}[ERROR]${NC} Docker 服务启动失败"
              docker-compose logs
              exit 1
            fi
            
          else
            # 本地部署方式
            echo -e "${BLUE}[INFO]${NC} 使用本地方式部署..."
            
            # 检查 Node.js 和 npm
            NODE_CMD=""
            if command -v node &> /dev/null; then
              NODE_CMD="node"
            elif command -v nodejs &> /dev/null; then
              NODE_CMD="nodejs"
            else
              echo -e "${RED}[ERROR]${NC} Node.js 未安装"
              exit 1
            fi
            
            if ! command -v npm &> /dev/null; then
              echo -e "${RED}[ERROR]${NC} npm 未安装"
              exit 1
            fi
            
            # 检查 Node.js 版本
            NODE_VERSION=$($NODE_CMD -v | sed 's/v//' | cut -d. -f1)
            if [ -z "$NODE_VERSION" ] || [ "$NODE_VERSION" -lt 16 ]; then
              echo -e "${RED}[ERROR]${NC} Node.js 版本需要 >= 16.0.0，当前: $($NODE_CMD -v)"
              exit 1
            fi
            
            echo -e "${BLUE}[INFO]${NC} Node.js 版本: $($NODE_CMD -v), npm 版本: $(npm -v)"
            
            # 创建必要的目录
            cd "$PROJECT_DIR"
            mkdir -p logs data
            
            # 安装/更新依赖
            echo -e "${BLUE}[INFO]${NC} 安装依赖..."
            npm ci --production || npm install --production
            
            # 停止现有服务（如果存在 PID 文件）
            if [ -f ".pid" ]; then
              OLD_PID=$(cat .pid)
              if ps -p "$OLD_PID" > /dev/null 2>&1; then
                echo -e "${BLUE}[INFO]${NC} 停止现有服务 (PID: $OLD_PID)..."
                kill "$OLD_PID" || true
                sleep 2
                # 如果进程仍在运行，强制杀死
                if ps -p "$OLD_PID" > /dev/null 2>&1; then
                  kill -9 "$OLD_PID" || true
                  sleep 1
                fi
              fi
              rm -f .pid
            fi
            
            # 检查端口占用并清理
            PORT=$(grep "^PORT=" .env 2>/dev/null | cut -d'=' -f2 || echo "3000")
            PORT=${PORT:-3000}
            echo -e "${BLUE}[INFO]${NC} 检查端口 $PORT..."
            
            if command -v lsof &> /dev/null; then
              OLD_PORT_PID=$(lsof -ti:$PORT 2>/dev/null || true)
              if [ -n "$OLD_PORT_PID" ] && [ "$OLD_PORT_PID" != "$OLD_PID" ]; then
                echo -e "${YELLOW}[WARNING]${NC} 端口 $PORT 被进程 $OLD_PORT_PID 占用，尝试停止..."
                kill "$OLD_PORT_PID" || kill -9 "$OLD_PORT_PID" || true
                sleep 2
              fi
            fi
            
            # 启动服务
            echo -e "${BLUE}[INFO]${NC} 启动服务..."
            nohup npm start > logs/app.log 2>&1 &
            NEW_PID=$!
            echo $NEW_PID > .pid
            
            # 等待服务启动
            echo -e "${BLUE}[INFO]${NC} 等待服务启动..."
            sleep 5
            
            # 检查服务状态
            if ps -p "$NEW_PID" > /dev/null 2>&1; then
              echo -e "${GREEN}[SUCCESS]${NC} 服务启动成功！(PID: $NEW_PID)"
              
              # 健康检查
              if command -v curl &> /dev/null; then
                sleep 2
                if curl -f -s "http://localhost:$PORT/health" > /dev/null 2>&1; then
                  echo -e "${GREEN}[SUCCESS]${NC} 健康检查通过"
                else
                  echo -e "${YELLOW}[WARNING]${NC} 健康检查失败，但进程正在运行"
                  echo -e "${BLUE}[INFO]${NC} 查看日志: tail -f $PROJECT_DIR/logs/app.log"
                fi
              fi
            else
              echo -e "${RED}[ERROR]${NC} 服务启动失败"
              echo -e "${BLUE}[INFO]${NC} 最后50行日志:"
              tail -n 50 logs/app.log || true
              exit 1
            fi
          fi
          
          echo ""
          echo -e "${GREEN}========================================${NC}"
          echo -e "${GREEN}  部署完成！${NC}"
          echo -e "${GREEN}========================================${NC}"
          
    - name: Deployment Summary
      if: success()
      run: |
        echo "## 🚀 部署完成" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **分支**: dev" >> $GITHUB_STEP_SUMMARY
        echo "- **提交**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **提交信息**: ${{ github.event.head_commit.message }}" >> $GITHUB_STEP_SUMMARY
        echo "- **时间**: $(date '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "- **服务器**: \`${{ secrets.SSH_HOST }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ 部署成功完成！" >> $GITHUB_STEP_SUMMARY
